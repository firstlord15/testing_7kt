{"name": "Write review in product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: wait: http://172.19.0.5:4444/ does not respond in 30s", "trace": "request = <SubRequest 'driver' for <Function test_fifth_dop_task>>\n\n    @pytest.fixture\n    def driver(request):\n        browser_name = request.config.getoption(\"--browser\")\n        log_level = request.config.getoption(\"--log_level\")\n        executor = request.config.getoption(\"--executor\")\n        headless = request.config.getoption(\"--headless\")\n        executor_url = f\"http://{executor}:4444/wd/hub\"\n        base_url = f\"https://demo-opencart.ru/\"  # https://demo-opencart.ru/\n    \n        logger = logging.getLogger(request.node.name)\n        file_handler = logging.FileHandler(f\"logs/{request.node.name}.log\")\n        file_handler.setFormatter(logging.Formatter(\"%(levelname)s %(message)s\"))\n        logger.addHandler(file_handler)\n        logger.setLevel(level=log_level)\n    \n        logger.info(\n            \"===> Test %s started at %s\" % (request.node.name, datetime.datetime.now())\n        )\n    \n        if browser_name == \"chrome\":\n            option = ChromeOptions()\n            if headless: option.add_argument('--headless')\n        elif browser_name == \"firefox\":\n            option = FirefoxOptions()\n            if headless: option.add_argument('--headless')\n        else:\n            raise Exception(\"Driver not supported\")\n    \n        # Set browser options\n        option.add_argument(\"--start-maximized\")\n        option.add_argument(\"--disable-infobars\")\n        option.add_argument(\"--ignore-certificate-errors\")\n    \n        # Set capability\n        option.set_capability(\"browserVersion\", os.getenv(\"VERSION\"))\n        selenoid_options = {\n            \"enableVideo\": True,\n            \"enableVNC\": True,\n            \"videoName\": f\"{os.environ.get('PYTEST_CURRENT_TEST').split(':')[-1].split(' ')[0]}.mp4\",\n            \"name\": os.environ.get(\"PYTEST_CURRENT_TEST\").split(\":\")[-1].split(\" \")[0]\n        }\n        option.set_capability(\"selenoid:options\", selenoid_options)\n    \n>       driver = webdriver.Remote(\n            command_executor=executor_url,\n            options=option\n        )\n\nconftest.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\setma\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\nC:\\Users\\setma\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\setma\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021799C9CA10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"wait: http://172.19.0.5:4444/ does not respond in 30s\"}}\\n'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: wait: http://172.19.0.5:4444/ does not respond in 30s\n\nC:\\Users\\setma\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "135c07ff-0a05-43f8-bb54-5cbed5bd7c2c-attachment.txt", "type": "text/plain"}], "start": 1713353338108, "stop": 1713353338108, "uuid": "5411f61b-caaa-4fe9-8a29-bcb40f0a97a4", "historyId": "5e768e77b0ec62cee62d0521e71a71d3", "testCaseId": "5e768e77b0ec62cee62d0521e71a71d3", "fullName": "tests.main#test_fifth_dop_task", "labels": [{"name": "feature", "value": "Review"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "main"}, {"name": "host", "value": "DESKTOP-KSO9D5H"}, {"name": "thread", "value": "20212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.main"}]}